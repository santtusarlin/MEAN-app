{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/admin/admin.component.html","webpack:///./src/app/admin/admin.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/auth.guard.ts","webpack:///./src/app/auth.service.ts","webpack:///./src/app/list/list.component.html","webpack:///./src/app/list/list.component.ts","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/movie.service.ts","webpack:///./src/app/navbar/navbar.component.html","webpack:///./src/app/navbar/navbar.component.ts","webpack:///./src/app/newreview/newreview.component.html","webpack:///./src/app/newreview/newreview.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<div class=\\\"container-fluid\\\">\\n  <div class=\\\"d-flex mt-3 mb-3\\\">Submit a new movie</div>\\n      <form #f=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(f.value)\\\">\\n          <div class=\\\"form-group\\\">\\n              <label for=\\\"imgurl\\\">img_url;</label>\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"https://www...\\\" name=\\\"imgurl\\\" [(ngModel)]=\\\"imgurl\\\" ngModel />\\n              <label for=\\\"name\\\">Movie's name:</label>\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Name\\\" name=\\\"name\\\" [(ngModel)]=\\\"name\\\" ngModel />\\n              <label for=\\\"year\\\">Year:</label>\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Year\\\" name=\\\"year\\\" [(ngModel)]=\\\"year\\\" ngModel />\\n              <label for=\\\"length\\\">Length:</label>\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"0h 00min\\\" name=\\\"length\\\" [(ngModel)]=\\\"length\\\" ngModel />\\n              <label for=\\\"rating\\\">Rating:</label>\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"0.0\\\" name=\\\"rating\\\" [(ngModel)]=\\\"rating\\\" ngModel />\\n              <label for=\\\"genre\\\">Genre:</label>\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Action, Drama, Fantasy etc.\\\" name=\\\"genre\\\" [(ngModel)]=\\\"genre\\\" ngModel />\\n              <label for=\\\"review\\\">Synopsis:</label>\\n              <textarea rows=\\\"6\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Write your synopsis...\\\" name=\\\"review\\\" [(ngModel)]=\\\"review\\\" ngModel>\\n                </textarea>\\n              <input type=\\\"hidden\\\" name=\\\"id\\\" [(ngModel)]=\\\"id\\\" ngModel />\\n            </div>\\n          <button *ngIf=\\\"addnew\\\" type=\\\"submit\\\" class=\\\"btn btn-light\\\">Submit new\\n              </button>\\n          <button *ngIf=\\\"saveedited\\\" type=\\\"submit\\\" class=\\\"btn btn-light\\\">Save edit\\n          </button>\\n      </form>\\n  </div>\\n<div class=\\\"container-fluid\\\">\\n  <div class=\\\"d-flex mt-3 mb-3\\\">List of movies</div>\\n  <div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-striped\\\">\\n      <thead>\\n        <tr>\\n          <th>#</th>\\n          <th>Movie</th>\\n          <th>Year</th>\\n          <th>Length</th>\\n          <th>Rating</th>\\n          <th>Genre</th>\\n          <th></th>\\n          <th></th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <!--*ngFor on looppidirektiivi-->\\n        <tr *ngFor=\\\"let m of movies\\\">\\n          <td><img src=\\\"{{m.imgurl}}\\\"/></td>\\n          <td>{{m.name}}</td>\\n          <td>{{m.year}}</td>\\n          <td>{{m.length}}</td>\\n          <td>{{m.rating}}</td>\\n          <td>{{m.genre}}</td>\\n          <td><span id=\\\"del\\\" class=\\\"btn btn-light\\\" (click)=\\\"delete(m)\\\">Poista</span></td>\\n          <td><span id=\\\"upd\\\" class=\\\"btn btn-light\\\" (click)=\\\"update(m)\\\">Muokkaa</span></td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { MovieService } from '../movie.service';\nimport { Movie } from '../movie';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html'\n})\nexport class AdminComponent implements OnInit {\n\n  movies: Array<Movie> = [];\n  addnew = true;\n  saveedited = false;\n  imgurl = '';\n  name = '';\n  year = '';\n  length = '';\n  rating = '';\n  genre = '';\n  review = '';\n  id = '';\n\n  constructor(private movieService: MovieService) { }\n\n  getMovies() {\n    this.movieService.getMovies().subscribe(data => this.movies = data);\n}\n\n  onSubmit(formData) {\n    console.log(formData);\n    // valitaan post tai put\n    // post eli uusi elokuva\n    if (this.addnew === true) {\n      this.movieService.addMovie({\n        'imgurl': formData.imgurl,\n        'name': formData.name,\n        'year': formData.year,\n        'length': formData.length,\n        'rating': formData.rating,\n        'genre': formData.genre,\n        'review': formData.review\n        // samalla kun data tilataan se pushataan komponentin students -taulukkoon\n      }).subscribe(data => this.movies.push(data));\n    }\n    // put eli päivitetään elokuva\n    if (this.saveedited === true) {\n      this.movieService.updateMovie({\n        '_id': formData.id,\n        'imgurl': formData.imgurl,\n        'name': formData.name,\n        'year': formData.year,\n        'length': formData.length,\n        'rating': formData.rating,\n        'genre': formData.genre,\n        'review': formData.review\n      }).subscribe(() => this.getMovies());\n      // nollataan asetukset\n      this.addnew = true;\n      this.saveedited = false;\n      this.imgurl = '';\n      this.name = '';\n      this.year = '';\n      this.length = '';\n      this.rating = '';\n      this.genre = '';\n      this.review = '';\n      this.id = '';\n    }\n  }\n\n  delete(m: Movie) {\n  console.log('Poistetaan: ' + m._id);\n  this.movieService.delMovie(m._id)\n    .subscribe(() => this.getMovies());\n}\n\n  update(m: Movie) {\n    this.imgurl = m.imgurl;\n    this.name = m.name;\n    this.year = m.year;\n    this.length = m.length;\n    this.rating = m.rating;\n    this.genre = m.genre;\n    this.review = m.review;\n    this.id = m._id;\n\n    this.addnew = false;\n    this.saveedited = true;\n  }\n\n  ngOnInit() {\n    this.getMovies();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ListComponent } from './list/list.component';\nimport { LoginComponent } from './login/login.component';\nimport { NewreviewComponent } from './newreview/newreview.component';\nimport { AdminComponent } from './admin/admin.component';\nimport { AuthGuard } from './auth.guard';\n\nconst routes: Routes = [\n  { path: '', component: ListComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'newreview', component: NewreviewComponent, canActivate: [AuthGuard] },\n  { path: 'admin', component: AdminComponent, canActivate: [AuthGuard] },\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\"","module.exports = \"<!--HTML-templaatit ovat sovelluksen view-->\\n<div class=\\\"application\\\">\\n  <app-navbar></app-navbar>\\n  <!-- vaihtuvat komponentit (spa-näkymät) tulevat <router-outlet> -tagien väliin -->\\n  <router-outlet></router-outlet>  \\n</div>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'meanfront';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule} from '@angular/forms';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ListComponent } from './list/list.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { LoginComponent } from './login/login.component';\nimport { NewreviewComponent } from './newreview/newreview.component';\nimport { AdminComponent } from './admin/admin.component';\n\nimport { AuthGuard } from './auth.guard';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ListComponent,\n    NavbarComponent,\n    LoginComponent,\n    NewreviewComponent,\n    AdminComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  providers: [AuthGuard],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n    constructor(private router: Router) { }\n\n    canActivate() { // Token löytyy jolloin Guard palauttaa true\n        if (sessionStorage.getItem('accesstoken')) {\n            return true;\n        }\n\n        // Ei Tokenia jolloin palataan login -sivulle\n        this.router.navigate(['/login']);\n        return false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt'; // kirjasto jwt:n käsittelyyn\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\n@Injectable()\nexport class AuthService {\n\n  private apiUrl = 'movies/login'; // autentikaatiopalvelun osoite\n  public token: string;\n  private jwtHelp = new JwtHelperService(); // helpperipalvelu jolla dekoodataan token\n  private subject = new Subject<any>(); // subjectilla viesti navbariin että token on tullut\n\n  constructor(private http: HttpClient) {\n    // Jos token on jo sessionStoragessa, otetaan se sieltä muistiin\n    const currentUser = JSON.parse(sessionStorage.getItem('accesstoken'));\n    this.token = currentUser && currentUser.token;\n  }\n  /* login-metodi ottaa yhteyden backendin autentikaatioreittiin, postaa tunnarit\n  ja palauttaa Observablena true tai false riippuen siitä saatiinko lähetetyillä\n  tunnareilla token backendistä */\n  login(username: string, password: string): Observable<boolean> {\n    // tässä ei käytetä JSON.stringify -metodia lähtevälle tiedolle\n    return this.http.post(this.apiUrl, { username: username, password: password })\n      .pipe(map((res) => {\n        console.log(res); // loggaa alla olevan tyylisen vastauksen\n        /*\n        {success: true, message:\n          \"Tässä on valmis Token!\",\n          token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ…zNzV9.x1gWEg9DtoPtEUUHlR8aDgpuzG6NBNJpa2L-MEhyraQ\"}\n        */\n        const token = res['token']; // otetaan vastauksesta token\n        if (token) {\n          this.token = token;\n          /* Tässä tutkitaan onko tokenin payloadin sisältö oikea.\n             Jos on, laitetaan token sessionStorageen ja palautetaan true\n             jolloin käyttäjä pääsee Admin-sivulle\n          */\n          try {\n            // dekoodataan token\n            const payload = this.jwtHelp.decodeToken(token);\n            console.log(payload);\n            // Tässä voidaan tarkistaa tokenin oikeellisuus\n            if (payload.username === username && payload.isadmin === true) {\n              // token sessionStorageen\n              sessionStorage.setItem('accesstoken', JSON.stringify({ username: username, token: token }));\n              this.loginTrue(); // lähetetään viesti navbariin että vaihdetaan login:true -tilaan\n              console.log('login onnistui');\n              return true; // saatiin token\n            } else {\n              console.log('login epäonnistui');\n              return false; // ei saatu tokenia\n            }\n          } catch (err) {\n            return false;\n          }\n        } else {\n          console.log('tokenia ei ole');\n          return false;\n        }\n      }));\n  }\n  /* Ilmoitetaan navbariin että koska ollaan loggauduttu,\n     niin Logout on mahdollista tehdä, joten vaihdetaan navbariin login-linkin\n     tilalle logout-linkki\n  */\n  loginTrue(): Observable<any> {\n    this.subject.next(true);\n    return this.subject.asObservable();\n  }\n\n  // logout poistaa tokenin sessionStoragesta\n  logout(): void {\n    this.token = null;\n    sessionStorage.removeItem('accesstoken');\n  }\n}\n\n","module.exports = \"<div class=\\\"container-fluid\\\">\\n  <div class=\\\"d-flex mt-3 mb-3\\\">List of movies</div>\\n\\n<div class=\\\"table-responsive\\\">\\n  <table class=\\\"table table-striped\\\">\\n    <thead>\\n      <tr>\\n        <th></th>\\n        <th>Movie</th>\\n        <th>Year</th>\\n        <th>Length</th>\\n        <th>Rating</th>\\n        <th>Genre</th>\\n        <th>Synopsis</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <!--*ngFor on looppidirektiivi-->\\n      <tr *ngFor=\\\"let m of movies\\\">\\n        <td><img src=\\\"{{m.imgurl}}\\\"/></td>\\n        <td (click)=\\\"showReview(m)\\\">{{m.name}}</td>\\n        <td>{{m.year}}</td>\\n        <td>{{m.length}}</td>\\n        <td>{{m.rating}}</td>\\n        <td>{{m.genre}}</td>\\n        <td>{{m.review}}</td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { MovieService } from '../movie.service';\nimport { Movie } from '../movie';\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html'\n})\nexport class ListComponent implements OnInit {\n\n  movies: Array<Movie> = []; // elokuvat tulevat tähän taulukkoon\n// konstruktorissa injektoidaan service list-komponenttiin\n  constructor(private movieService: MovieService) {\n    this.movieService.getMovies().subscribe(data => this.movies = data);\n   }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<div class=\\\"container-fluid\\\">\\n  <div class=\\\"d-flex mt-3 mb-3\\\">Login</div>\\n<form #f=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(f.value)\\\">\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"username\\\">Username:</label>\\n        <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"username\\\" ngModel />\\n        <label for=\\\"password\\\">Password:</label>\\n        <input type=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\" ngModel /><br />\\n        <button type=\\\"submit\\\" class=\\\"btn btn-light\\\">Log In</button>\\n    </div>\\n    <div *ngIf=\\\"error\\\" class=\\\"alert alert-danger\\\">{{error}}</div>\\n</form>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html'\n})\n\nexport class LoginComponent implements OnInit {\n  error = '';\n  // injektoidaan router ja authService\n  constructor(private router: Router,\n    private authService: AuthService) { }\n\n  ngOnInit() {\n    // aina kun login-komponentti ladataan, poistetaan token\n    this.authService.logout();\n  }\n\n  // lomakkeen lähetys\n  // authService palauttaa observablen jossa on joko true tai false\n  onSubmit(formData) {\n    this.authService.login(formData.username, formData.password)\n      .subscribe(result => {\n        if (result === true) {\n          this.router.navigate(['/admin']);\n        } else {\n          this.error = 'Username or password incorrect';\n        }\n      });\n  }\n}\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Movie } from './movie';\nimport { catchError } from 'rxjs/operators';\n\nconst headers = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) };\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MovieService {\n\n  private apiUrl = 'movies'; // apin osoite\n\n  constructor(private http: HttpClient) { } // HttpClientin DI\n\n  // Virheenkäsittelymetodi joka palauttaa observablen\n  private handleError(error: any): Observable<any> {\n    console.error('An error occurred', error);\n    return (error.message || error);\n  }\n  // Kaikkien opiskelijoiden haku. Palauttaa observablena opiskelijataulukon\n  getMovies(): Observable<Movie[]> {\n    return this.http.get<Movie[]>(this.apiUrl)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  /** POST: lisätään elokuva palvelimelle.\n   * Movien tyyppi on any, koska _id puuttuu eikä noudateta movie.ts:n mallia.\n   * _id jätetään pois opiskelijaa lisättaessä, koska Mongo lisää sen automaattisesti\n  */\n addMovie(movie: any): Observable<Movie> {\n   // serveri vaatii tokenin jotta kannan muokkaus olisi mahdollista\n   const mytoken = JSON.parse(sessionStorage['accesstoken']);\n    const tokenheaders = { headers: new HttpHeaders({ 'x-access-token': mytoken.token }) };\n  return this.http.post<Movie>(this.apiUrl, movie, tokenheaders)\n    .pipe(\n      catchError(this.handleError)\n    );\n}\n\n// PUT: päivitys id:n perusteella\n  updateMovie(movie: any):\n  Observable<Movie> {\n    const mytoken = JSON.parse(sessionStorage['accesstoken']);\n    const tokenheaders = { headers: new HttpHeaders({ 'x-access-token': mytoken.token }) };\n    const url = `${this.apiUrl}/${movie._id}`;\n    return this.http.put<Movie>(url, movie, tokenheaders).pipe(catchError(this.handleError)\n    );\n  }\n  // DEL: poistetaan elokuva\n  delMovie(id: string): Observable<Movie> {\n    const mytoken = JSON.parse(sessionStorage['accesstoken']);\n    const tokenheaders = { headers: new HttpHeaders({ 'x-access-token': mytoken.token }) };\n    const url = `${this.apiUrl}/${id}`;\n    return this.http.delete<Movie>(url, tokenheaders).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n}\n","module.exports = \"<nav class=\\\"navbar navbar-expand-sm bg-light navbar-light\\\">\\n  <div class=\\\"navbar-header\\\">\\n    <a class=\\\"navbar-brand\\\" routerLink=\\\"/\\\">MovieDB</a>\\n  </div>\\n\\n  <!-- Toggler/collapsibe Button -->\\n  <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#collapsibleNavbar\\\">\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\n  </button>\\n\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"collapsibleNavbar\\\">\\n    <ul class=\\\"navbar-nav ml-auto\\\">\\n      <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" routerLink=\\\"/\\\">Movies</a></li>\\n      <li *ngIf=\\\"login\\\" class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" routerLink=\\\"/newreview\\\">Add a new movie</a></li>\\n      <li *ngIf=\\\"login\\\" class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" routerLink=\\\"/admin\\\">Admin</a></li>\\n      <li *ngIf=\\\"!login\\\" class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" routerLink=\\\"/login\\\">Login</a></li>\\n      <li *ngIf=\\\"login\\\" class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" routerLink=\\\"/login\\\" (click)=\\\"doLogout()\\\">Logout</a></li>\\n    </ul>\\n  </div>\\n</nav>\\n\"","import { Component, OnDestroy } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html'\n})\n\nexport class NavbarComponent implements OnDestroy {\n  login: boolean;\n  subscription: Subscription; // Subscription -tyyppiseen olioon voidaan tallentaa observablen tilaus.\n\n  constructor(private authService: AuthService) {\n    // Tilataan viesti ja tallennetaan tulos this.login -muuttujaan\n    this.subscription = this.authService.loginTrue().subscribe(message => { this.login = message; });\n    /* varmistetaan että login -tila säilyy myös kun sivu reffataan\n       varmistus tehdään katsomalla onko token sessionstoragessa.\n       Yllä oleva observablen tilaus silti tarvitaan, sillä sessionstoragen\n       tarkistus vaatii aina reffauksen koska sitä ei voi kutsua asynkronisesti. */\n    const atoken = sessionStorage.getItem('accesstoken');\n    if (atoken) {\n      this.login = true;\n    } else {\n      this.login = false;\n    }\n  }\n\n  ngOnDestroy() {\n    // lopetetaan tilaus kun komponentti tuhotaan\n    this.subscription.unsubscribe();\n  }\n\n  doLogout() {\n    this.login = false;\n  }\n\n}\n","module.exports = \"<div class=\\\"container-fluid\\\">\\n  <div class=\\\"d-flex mt-3 mb-3\\\">Submit a new movie</div>\\n  <form #f=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(f.value)\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"imgurl\\\">img_url;</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"https://www...\\\" name=\\\"imgurl\\\" [(ngModel)]=\\\"imgurl\\\" ngModel />\\n      <label for=\\\"name\\\">Movie's name:</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Name\\\" name=\\\"name\\\" [(ngModel)]=\\\"name\\\" ngModel />\\n      <label for=\\\"year\\\">Year:</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Year\\\" name=\\\"year\\\" [(ngModel)]=\\\"year\\\" ngModel />\\n      <label for=\\\"length\\\">Length:</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"0h 00min\\\" name=\\\"length\\\" [(ngModel)]=\\\"length\\\" ngModel />\\n      <label for=\\\"rating\\\">Rating:</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"0.0\\\" name=\\\"rating\\\" [(ngModel)]=\\\"rating\\\" ngModel />\\n      <label for=\\\"genre\\\">Genre:</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Action, Drama, Fantasy etc.\\\" name=\\\"genre\\\" [(ngModel)]=\\\"genre\\\"\\n        ngModel />\\n      <label for=\\\"review\\\">Synopsis:</label>\\n      <textarea rows=\\\"6\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Write your synopsis...\\\" name=\\\"review\\\" [(ngModel)]=\\\"review\\\"\\n        ngModel>\\n                  </textarea>\\n      <input type=\\\"hidden\\\" name=\\\"id\\\" [(ngModel)]=\\\"id\\\" ngModel />\\n    </div>\\n    <!--<button (click)=\\\"add(m)\\\" class=\\\"btn btn-light\\\">Submit</button>-->\\n    <button type=\\\"submit\\\" class=\\\"btn btn-light\\\">Submit</button>\\n  </form>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { MovieService } from '../movie.service';\nimport { Movie } from '../movie';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-newreview',\n  templateUrl: './newreview.component.html'\n})\n\nexport class NewreviewComponent implements OnInit {\n\n  movies: Array<Movie> = []; // elokuvat tulevat tähän taulukkoon\n\n  constructor(private router: Router, private movieService: MovieService) { }\n\n  getMovies() {\n    this.movieService.getMovies().subscribe(data => this.movies = data);\n  }\n\n  onSubmit(formData) {\n    console.log(formData);\n    // tässä pitää valita onko kyseessä uuden lisäys vai muokkaus\n    // servicessä on eri metodit postille ja putille\n\n    // lisätään opiskelija ja laitetaan se heti listaan\n      this.movieService.addMovie({\n        'imgurl': formData.imgurl,\n        'name': formData.name,\n        'year': formData.year,\n        'length': formData.length,\n        'rating': formData.rating,\n        'genre': formData.genre,\n        'review': formData.review\n        // samalla kun data tilataan se pushataan komponentin students -taulukkoon\n      }).subscribe(data => this.movies.push(data));\n      this.router.navigate(['/']);\n    }\n\n  ngOnInit() {\n    this.getMovies();\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}